(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{1014:function(t,e,o){"use strict";o.r(e);var s=o(9),n=o(836),a=o.n(n),i=o(988),r=o.n(i),c=o(989),d=o.n(c),p='<section class=""><section class=""> <h1 id=faceting>Faceting</h1> <p>You&#39;ve learned to use color in your scatterplots.</p> <p>Now you&#39;ll learn another way to explore your data. plotnine lets you divide your plot into subplots to get one smaller graph for each level of a variable.</p> <p>This is called faceting, and it&#39;s another powerful way to communicate relationships within your data.</p> </section></section><section class=font-size-sm><section class=font-size-sm> <h1 id=faceting-1>Faceting</h1> <pre><code class=language-python>asia_top200 = (\n  music_top200\n  &gt;&gt; filter(_.continent == &quot;Asia&quot;)\n)\nasia_top200</code></pre> <div> <style scoped>.dataframe tbody tr th:only-of-type{vertical-align:middle}.dataframe thead th{text-align:right}</style><p></p> <table border=1 class=dataframe> <thead> <tr style=text-align:right> <th></th> <th>country</th> <th>position</th> <th>track_name</th> <th>artist</th> <th>streams</th> <th>duration</th> <th>continent</th> </tr> </thead> <tbody> <tr> <th>4600</th> <td>Hong Kong</td> <td>1</td> <td>WANNABE</td> <td>ITZY</td> <td>112648</td> <td>191.242</td> <td>Asia</td> </tr> <tr> <th>4601</th> <td>Hong Kong</td> <td>2</td> <td>Intentions (feat. Quavo)</td> <td>Justin Bieber</td> <td>104467</td> <td>212.867</td> <td>Asia</td> </tr> <tr> <th>4602</th> <td>Hong Kong</td> <td>3</td> <td>Señorita</td> <td>Shawn Mendes</td> <td>84196</td> <td>190.960</td> <td>Asia</td> </tr> <tr> <th>...</th> <td>...</td> <td>...</td> <td>...</td> <td>...</td> <td>...</td> <td>...</td> <td>...</td> </tr> <tr> <th>12197</th> <td>Viet Nam</td> <td>198</td> <td>Đưa Nhau Đi Trốn (Chill Version)</td> <td>Đen</td> <td>20750</td> <td>241.959</td> <td>Asia</td> </tr> <tr> <th>12198</th> <td>Viet Nam</td> <td>199</td> <td>Hôm Nay Tôi Buồn</td> <td>Phùng Khánh Linh</td> <td>20580</td> <td>275.000</td> <td>Asia</td> </tr> <tr> <th>12199</th> <td>Viet Nam</td> <td>200</td> <td>Kick It</td> <td>NCT 127</td> <td>20495</td> <td>233.013</td> <td>Asia</td> </tr> </tbody> </table> <p>2600 rows × 7 columns</p> </div> <aside class=notes> <p>For this example, we&#39;ll use Spotify top 200 track data for countries in Asia.</p> </aside></section></section><section class=""><section class=""> <h1 id=faceting-2>Faceting</h1> <pre><code class=language-python>(asia_top200\n  &gt;&gt; ggplot(aes(&quot;position&quot;, &quot;streams&quot;, color = &quot;country&quot;))\n   + geom_point()\n)</code></pre> <p><img src='+a()(r.a)+' alt=png></p> <aside class=notes> <p>This plot shows the number of streams for each top 200 track in Asian countries.</p> <p>There are so many countries that the plot hits two issues:</p> <ol> <li>it has to use many different colors.</li> <li>many points are on top of each other.</li> </ol> <p>A facetted plot could help here, by giving each country its own small panel.</p> </aside></section></section><section class=""><section class=""> <h1 id=faceting-3>Faceting</h1> <pre><code class=language-python>(asia_top200\n  &gt;&gt; ggplot(aes(&quot;position&quot;, &quot;streams&quot;, color = &quot;country&quot;))\n   + geom_point()\n   + facet_wrap(&#39;~country&#39;)\n)</code></pre> <p><img src='+a()(d.a)+' alt=png></p> <aside class=notes> <p>You facet a plot by adding another option, with a +, to the end of your code, after geom_point.</p> <p>You add facet underscore wrap, then &quot;tilde continent&quot; within the parentheses.</p> <p>In R, the tilde symbol typically means &quot;by&quot;, meaning that we&#39;re splitting the plot by continent, and you can usually find it on the upper left of your keyboard. This tells ggplot2 to divide the data into subplots based on the continent variable.</p> <p>Faceting is a powerful tool, and in the exercises you&#39;ll see how you can use faceting not just to compare among continents, but to compare between all of the years in our dataset.</p> </aside></section></section><section class=""><section class=""> <h1 id=lets-practice>Let&#39;s practice!</h1> <aside class=notes> <p>Scroll down to get started with practice!</p> </aside></section></section>',l=o(835),h=o(7);function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}h.a.config.optionMergeStrategies;var g={slides:p,VueRemarkRoot:l.a},m=function(t){var e=t.options.components=t.options.components||{},o=t.options.computed=t.options.computed||{};Object.keys(g).forEach((function(t){"object"===u(g[t])&&"function"==typeof g[t].render?e[t]=g[t]:o[t]=function(){return g[t]}}))},f=h.a.config.optionMergeStrategies,b="__vueRemarkFrontMatter",y={excerpt:null,title:"Facets",output:"html_document",editor_options:{chunk_output_type:"console"},chunk:"visualize"};var A=function(t){t.options[b]&&(t.options[b]=y),h.a.util.defineReactive(t.options,b,y),t.options.computed=f.computed({$frontmatter:function(){return t.options[b]}},t.options.computed)},w=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("VueRemarkRoot",[s("Notebook",{attrs:{branch:"master",repo:"machow/purview",url:"https://mybinder.org",useBinder:"1",useStorage:"1"},scopedSlots:t._u([{key:"default",fn:function(e){return[s("details",{directives:[{name:"fix-codemirror",rawName:"v-fix-codemirror"},{name:"show",rawName:"v-show",value:e.debut,expression:"nb.debut"}]},[s("code-cell",{attrs:{status:e.status,onExecute:e.execute,onReady:e.updateSetupCode,language:"python"}},[s("pre",[s("code",{pre:!0},[t._v('# TODO: explain how to run this, and that they only need the gist (loads tools)\n\n# wranglign ---------\nimport pandas as pd\nfrom siuba import *\n\n# plotting ----------\nfrom plotnine import *\n\ntheme_set(theme_classic(base_family = "Noto Sans CJK JP"))\n\n# data --------------\nfrom music_top200 import music_top200, track_features\n\n# student support ----------\nfrom siuba import pipe\nfrom IPython.display import HTML, display\nfrom siututor import Blank\n___ = Blank()\n\n# DataFrame display --------\npd.set_option("display.max_rows", 6)\n\nfrom IPython import get_ipython\n# special ipython function to get the html formatter\nhtml_formatter = get_ipython().display_formatter.formatters[\'text/html\']\n\n# here, we avoid the default df._repr_html_ method, since it inlines css\n# (style tags make vue angry)\nhtml_formatter.for_type(\n    pd.DataFrame,\n    lambda df: df.to_html(max_rows = pd.get_option("display.max_rows"), show_dimensions = True)\n)\n\n# remove the <ggplot: (528...)> printout\nhtml_formatter.for_type(ggplot, lambda g: "")\n')])])])],1),s("RevealSlides",{attrs:{slides:t.slides}}),s("h3",{attrs:{id:"exercise-1"}},[s("a",{attrs:{href:"#exercise-1","aria-hidden":"true"}},[s("span",{staticClass:"fa fa-link"})]),t._v("Exercise 1:")]),s("p",[s("strong",[t._v("TODO")])]),s("h3",{attrs:{id:"exercise-2"}},[s("a",{attrs:{href:"#exercise-2","aria-hidden":"true"}},[s("span",{staticClass:"fa fa-link"})]),t._v("Exercise 2:")]),s("p",[t._v("Below is the start of plotnine's documentation for "),s("code",{pre:!0},[t._v("facet_wrap")]),t._v(". ")]),s("img",{staticStyle:{width:"100%"},attrs:{src:o(986)}}),s("p",[t._v("Notice that the Parameters section lists "),s("code",{pre:!0},[t._v("ncol")]),t._v(" and "),s("code",{pre:!0},[t._v("nrow")]),t._v(" options. These determine how many columns or rows to use. For example, the plot below has "),s("code",{pre:!0},[t._v("nrow = 1")]),t._v(".")]),s("p",[t._v("Try out the plot as is, and with the "),s("code",{pre:!0},[t._v("nrow")]),t._v(" argument changed to "),s("code",{pre:!0},[t._v("ncol = 1")]),t._v(".\nThen, answer the questions below.")]),s("code-cell",{attrs:{status:e.status,onExecute:e.execute,ex:"a",exIndx:0,language:"python"},scopedSlots:t._u([{key:"output",fn:function(){return[s("p",[s("g-image",{attrs:{src:o(987),alt:"png"}})],1)]},proxy:!0}],null,!0)},[s("pre",[s("code",{pre:!0},[t._v('# This code keeps the 3 artists listed ----\nartists_to_keep = ["Billie Eilish", "ITZY", "Roddy Ricch"]\n\nsome_artists = (\n  track_features\n  >> filter(_.artist.isin(artists_to_keep))\n)\n\n# This code plots the data ----\n(some_artists\n  >> ggplot(aes("energy", "valence", color = "artist"))\n   + geom_point()\n   + facet_wrap("~artist", nrow = 1)\n   + labs(title = "Song features across 3 artists")\n)\n')])])]),s("prompt-expandable",{attrs:{header:"Which of the three artists tends to have the lowest valence?"}},[s("q-multiple-choice",[s("q-opt",{attrs:{text:"Billie Eilish"}},[s("span",[t._v('Correct! We\'ll discuss how to measure the idea of "tends to have" in the next chapter.')])]),s("q-opt",{attrs:{text:"ITZY"}},[s("span",[t._v("That's not right. This artist tends to have the highest valence.")])]),s("q-opt",{attrs:{text:"Roddy Ricch"}},[s("span",[t._v("That's not right. Look for the cluster of points toward the bottom of the plot.")])])],1)],1),s("p",[t._v("Which value seems easier to compare across facets, when ncol is set to 1?")]),s("details",[s("summary",[t._v("answer")]),t._v("\n    \nThis is subjective, but I would say energy is easier to compare, since there is only one x-axis for across all plots. (For example, there is a only one spot on the x-axis where energy is .25).\n    \n")])]}}])})],1)}),[],!1,null,null,null);"function"==typeof m&&m(w),"function"==typeof A&&A(w);e.default=w.exports},835:function(t,e,o){"use strict";e.a={name:"VueRemarkRoot",render:function(t){return t("div",null,this.$slots.default)}}},836:function(t,e,o){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(e.hash&&(t+=e.hash),e.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(t)?'"'.concat(t,'"'):t)}},986:function(t,e,o){t.exports=o.p+"assets/img/facet_wrap_docs.81eabe7b.png"},987:function(t,e){t.exports={type:"image",mimeType:"image/png",src:"/assets/static/02d-facets_5_0.578a6fa.1c7ab051d5e08d458e8c29a8ac00ecb7.png",size:{width:703,height:478},sizes:"(max-width: 703px) 100vw, 703px",srcset:["/assets/static/02d-facets_5_0.578a6fa.1c7ab051d5e08d458e8c29a8ac00ecb7.png 703w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 703 478' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ba4c87b92a4b9b0c47678fa7e19a9730'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ba4c87b92a4b9b0c47678fa7e19a9730)' width='703' height='478' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAsCAYAAADVX77/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAHbElEQVRo3sWa53LaQBCAef%2b3yAskkx/JTOokcVzSHMe9AqYaY8A0USSxue/gFCFLAtEi%2b4aTru3ubb9LSeAZjUYzi%2bln2/bU2MFgIEke5nAcR9dd1/W%2b%2bdvnhck/LsmTCltoFkF4QP7jx4/y/v17efPmjXz9%2blXevXsnr1%2b/lrdv38rW1pZ8%2bPBBtx0eHsqPHz/0t52dHfny5YuuX11dyc%2bfP%2bXbt2/y4sULPd%2brV6/k4OBgJuJhMAYJODcBwig/D1VLpZKk02mNyPfv36XRaEg2m5Xb21tdaCsUClKpVHTfYrEo5XLZ61Or1aRareo67RTqd3d3M9cOg3ERLpjiANjx/PxcA5jJZDQwl5eXsru7q3eKnfz165eun56eekCD1M3NjSYEY3kHWT9SjP3z589Uez6f14U%2bjKXQBtHo9/v3b13gHsayNtxBMTDmcjk5Pj6Wdru9OAeYQcjwxcWFDIdD6Xa7%2bp3dg81h8f39fdnb29N1Fu/3%2b9LpdHQ/dg1A6c93xlN6vZ7mDICmnTrfaLMsS/%2byniEqosWc9GHM9va2FhnEhAIMIMxYCv3htHq9vhgB/GyEIoLi7IphY%2bogx86Y3Ta7RDs7wC/vcAvAsbv%2bNn7NWDM333R7TrF/oSTZTFYj7B9rxvDLOFOnmPFmDYi4FAdATXaHnV30ub%2b/l2azmXhcflSUarsqlXJFlnkW0gFmEIgjg9fX1x43zGt%2bjAmDU1BsSccP1F%2bj2ZBCvpB4bJh5XogAPLARyiXpRKYvBJhXFj2xG42J1261tRj5fYJNPE%2bUoBGBIEWfUDnE/CQhQLBPq9X6PwTwIxZGgLh68BtKal4CuJP2fL8oNbcuVtvSii6MAJGbsGoOwHwZHRBcyB30xW7UQz1GU2cHk4pAx1HmVobSara0Nt84AYIcENQBnpOEvS8VYwmAD7CoCODIxIlAVIywUgKgBJcRgaRK0PQp2srONwpSLpRjOeDx0VaWor9SIngiYLy6MCX4r7ixHLCQElT/mMF6sy7FQjGWAFbXlYsza9JnRQQwE5ighhIVGa6SA4Jj48ygfzMsy41EPmzTZsEy5QfABZ4OmACB3KMAW9tbYl2cTbWtggNMvygzGKYA97ZbUioOIs2135GK28x4MzgBwmk1FQEGYj8%2bimt1Yym/DAfE%2bQHBuYZDV/o9N5F%2biuKKVDCj49cBoxnaeBMEMO3VeyJUZ6ZlwBcheiUpQ/QZ5lpPEYDICtYP%2bgFBIOJkahE/IDiWICrMDzDttQdby3%2bUP2B%2bHx4e5ErpMzYS3GaZ3xTJDgM0BPA4AFar3InT7c50RtbFAWEEj5vXa6tWlMXoyqdPn3QK7ujoSGeswJXweYoD%2bGhC2ClHiLyfiuzcXi/W9G1KBGbZfq%2bNsc2O2MqneVR6C9yAiVCfcL0b2NDU8%2bfPNdtoO2tZ2hwGNf1U0kT1QTGGicY6OaBes0NF8YnLrnyVyqimccmkx2m9OHOZQmFAAJP/C/oBwQXsx4YWjU0SALufy/ZjRcFPgKp7r1Nq5ClNgBW1bgqEDVswyB8LRMn6/xKBMYyuFPODEBjHgqvPK3pjfQbbM6/JPrPRiAXc4XHAtH0dRrrCUSwkGxIB4/3hAzTqduQmOc5IspmBmq%2btlN6OVoIkcUm4YhbJThO0eQSIywd4bNWzpHczFg3r8tzTD%2bu2AnHKb143fda6UwQI5gNM8OO0W%2bKarKttR4rGOvyAMOT8sUBU5ipKYQa/RecDfED0b7Nzxefr5oC78kB7hPMGQvMkUKNzgiicbHq84wqgzsG%2bjCYHmZtyhIK7jALs9931ZIRMTiALG9pDBYQj9sRBQgQGxfxGY4GoIGaVyE8lRHARs5wNKEfIzufE7nT%2byRxHXWcnT5TfukUg7sB2pRxgFCBAGB3gTth9UC5J9%2bRIWYFrnRfYFAG84KY6lHbbWfnOh2aFOWj06wD9rVHXBPDHBJsUAVzgbmeNBJiyAooLbgFCeYb9/Dhq6mczT5CP4oCkWeGkIrCRk6Gr8zOFdU/pgLaXEfLLfhwHrNIPWOdZQCQBhmrhi71dGamAx4gByAcPRKLsavBkKIlNhgP8J0MbOxyd4gAlAjmFxKj2IN3jQxncZmSkAodhqTDXZIgAAcgiDwcj3A1Y5ln6iowWARUd2uq3pwDqg7xygeEMrATtFH%2bddqJIrteAAIqQumkP9g97R/nCOShg17cWc8eNNe2UlXAAv7BhWgFCOT070%2bmktIqrAY6IimiKOokT6rQTdyO/hJzUaaNwr4crN%2bbMgestxBq888u1GPpTJ1uDL2LGctPk5OREt7Me6/DNrM1tEuChjul2HGdxAoQNxA9gMYq5zwcwFHaJHTDXWMIWBSEQMyIBcUi4GB1hrr2Yy03%2bx5xPGJNM/M5cxkdBX7A23LZSEQgqFVgTxM07dfMOEfxtwWL6kmxBw4MogBt2pY05ohRecG3/e9TaS3FAEkrOisX912Y%2bf/4sL1%2b%2b1Bcjnz17pi9hJTl8nfW%2brHlMzXOSksQExQUxsGxnEmPMOzZJbL/I8xc46woX62%2bUdAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"}},988:function(t,e,o){t.exports=o.p+"assets/img/02d-slides_8_0.4c30886c.png"},989:function(t,e,o){t.exports=o.p+"assets/img/02d-slides_11_0.5c0344f1.png"}}]);